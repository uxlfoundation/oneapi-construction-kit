// Copyright (C) Codeplay Software Limited
//
// Licensed under the Apache License, Version 2.0 (the "License") with LLVM
// Exceptions; you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/uxlfoundation/oneapi-construction-kit/blob/main/LICENSE.txt
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
//
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
// @generate_autogen@

/// @file
///
/// Exposing implementations of non-IP restricted functions.

#ifndef __ABACUS_DETAIL_GEOMETRIC__
#define __ABACUS_DETAIL_GEOMETRIC__

#ifndef __cplusplus
#error This header should only be included from C++!
#endif

#ifndef __ABACUS_ABACUS_CONFIG__
#include <abacus/abacus_config.h>
#endif
#ifndef __ABACUS_ABACUS_GEOMETRIC__
#include <abacus/abacus_geometric.h>
#endif
#ifndef __ABACUS_ABACUS_MATH__
#include <abacus/abacus_math.h>
#endif
#ifndef __ABACUS_TYPE_TRAITS__
#include <abacus/abacus_type_traits.h>
#endif
#ifndef __ABACUS_ABACUS_CONFIG__
#include <abacus/abacus_detail_cast.h>
#endif
#ifndef __ABACUS_DETAIL_RELATIONAL__
#include <abacus/abacus_detail_relational.h>
#endif

namespace abacus {
namespace detail {
namespace geometric {

template <typename T>
T cross(const T &x, const T &y) {
  // We need to initialize the result to 0 because for vec4, the fourth element
  // must be set to 0.
  T result(0);

  result[0] = (x[1] * y[2]) - (x[2] * y[1]);
  result[1] = (x[2] * y[0]) - (x[0] * y[2]);
  result[2] = (x[0] * y[1]) - (x[1] * y[0]);

  return result;
}

template <typename T, bool SCALAR = 1 == TypeTraits<T>::num_elements>
struct dot_helper {
  static typename TypeTraits<T>::ElementType _(const T &x, const T &y) {
    const T sum = x * y;

    typename TypeTraits<T>::ElementType result = sum[0];

    for (unsigned i = 1; i < TypeTraits<T>::num_elements; i++) {
      result += sum[i];
    }

    return result;
  }
};

template <typename T>
struct dot_helper<T, true> {
  static typename TypeTraits<T>::ElementType _(const T &x, const T &y) {
    return x * y;
  }
};

template <typename T>
typename TypeTraits<T>::ElementType dot(const T &x, const T &y) {
  return dot_helper<T>::_(x, y);
}

template <typename T, typename E = typename TypeTraits<T>::ElementType>
struct length_typed_helper;

#ifdef __CA_BUILTINS_HALF_SUPPORT
template <typename T>
struct length_typed_helper<T, abacus_half> {
  static abacus_half _(const T &x) {
    // 2^-11
    const abacus_half reducingFactor = 0.00048828125f16;
    // 2^11
    const abacus_half increasingFactor = 2048.0f16;
    const abacus_half denormLimit =
        cast::as<abacus_half>(FPShape<T>::LeastSignificantExponentBit());

    const abacus_half part = geometric::dot<T>(x, x);

    if (relational::isinf(part)) {
      const T xR = x * reducingFactor;
      return __abacus_sqrt(geometric::dot<T>(xR, xR)) * increasingFactor;
    } else if (part < denormLimit) {
      const T xI = x * increasingFactor;
      return __abacus_sqrt(geometric::dot<T>(xI, xI)) * reducingFactor;
    } else {
      return __abacus_sqrt(part);
    }
  }
};
#endif  // __CA_BUILTINS_HALF_SUPPORT

template <typename T>
struct length_typed_helper<T, abacus_float> {
  static abacus_float _(const T &x) {
    // 1.2924697E-26, 2^-86
    const abacus_float reducingFactor = cast::as<abacus_float>(0x14800000);
    // 7.7371252E25, 2^86
    const abacus_float increasingFactor = cast::as<abacus_float>(0x6a800000);
    const abacus_float denormLimit =
        cast::as<abacus_float>(FPShape<T>::LeastSignificantExponentBit());

    const abacus_float part = geometric::dot<T>(x, x);

    if (relational::isinf(part)) {
      const T xR = x * reducingFactor;
      return __abacus_sqrt(geometric::dot<T>(xR, xR)) * increasingFactor;
    } else if (part < denormLimit) {
      const T xI = x * increasingFactor;
      return __abacus_sqrt(geometric::dot<T>(xI, xI)) * reducingFactor;
    } else {
      return __abacus_sqrt(part);
    }
  }
};

#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
template <typename T>
struct length_typed_helper<T, abacus_double> {
  static abacus_double _(const T &x) {
    // 1.8645851828000517e-155, 2^-514
    const abacus_double reducingFactor =
        cast::as<abacus_double>(0x1fd0000000000000);
    // 5.36312317197703883982960999928E154, 2^514
    const abacus_double increasingFactor =
        cast::as<abacus_double>(0x6010000000000000);
    const abacus_double denormLimit =
        cast::as<abacus_double>(FPShape<T>::LeastSignificantExponentBit());

    const abacus_double part = geometric::dot<T>(x, x);

    if (relational::isinf(part)) {
      const T xR = x * reducingFactor;
      return __abacus_sqrt(geometric::dot<T>(xR, xR)) * increasingFactor;
    } else if (part < denormLimit) {
      const T xI = x * increasingFactor;
      return __abacus_sqrt(geometric::dot<T>(xI, xI)) * reducingFactor;
    } else {
      return __abacus_sqrt(part);
    }
  }
};
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

template <typename T, bool SCALAR = 1 == TypeTraits<T>::num_elements>
struct length_untyped_helper {
  static typename TypeTraits<T>::ElementType _(const T &x) {
    return length_typed_helper<T>::_(x);
  }
};

template <typename T>
struct length_untyped_helper<T, true> {
  static typename TypeTraits<T>::ElementType _(const T x) {
    return __abacus_fabs(x);
  }
};

template <typename T>
typename TypeTraits<T>::ElementType length(const T &p) {
  return length_untyped_helper<T>::_(p);
}

template <typename T>
typename TypeTraits<T>::ElementType distance(const T &x, const T &y) {
  return geometric::length<T>(x - y);
}

template <typename T, typename E = typename TypeTraits<T>::ElementType>
struct fast_length_typed_helper {
  static typename TypeTraits<T>::ElementType _(const T &p) {
    return __abacus_sqrt(geometric::dot<T>(p, p));
  }
};

template <typename T>
struct fast_length_typed_helper<T, abacus_float> {
  static typename TypeTraits<T>::ElementType _(const T &p) {
    return __abacus_half_sqrt(geometric::dot<T>(p, p));
  }
};

template <typename T, bool SCALAR = 1 == TypeTraits<T>::num_elements>
struct fast_length_untyped_helper {
  static typename TypeTraits<T>::ElementType _(const T &x) {
    return fast_length_typed_helper<T>::_(x);
  }
};

template <typename T>
struct fast_length_untyped_helper<T, true> {
  static typename TypeTraits<T>::ElementType _(const T x) {
    return __abacus_fabs(x);
  }
};

template <typename T>
typename TypeTraits<T>::ElementType fast_length(const T &p) {
  return fast_length_untyped_helper<T>::_(p);
}

template <typename T>
typename TypeTraits<T>::ElementType fast_distance(const T &x, const T &y) {
  return geometric::fast_length<T>(x - y);
}

template <typename T, typename E = typename TypeTraits<T>::ElementType>
struct fast_normalize_helper {
  static T _(const T &p) { return p * __abacus_rsqrt(geometric::dot<T>(p, p)); }
};

template <typename T>
struct fast_normalize_helper<T, abacus_float> {
  static T _(const T &p) {
    return p * __abacus_half_rsqrt(geometric::dot<T>(p, p));
  }
};

template <typename T>
T fast_normalize(const T &p) {
  return fast_normalize_helper<T>::_(p);
}

template <typename T>
T normalize(T p) {
  constexpr size_t num_elements = TypeTraits<T>::num_elements;
  static_assert(num_elements >= 1 && num_elements <= 16);
  if constexpr (num_elements == 1) {
    if (p > 0) return 1;
    if (p < 0) return -1;
    return p;
  } else {
    using ElementType = typename TypeTraits<T>::ElementType;
    using UnsignedType = typename TypeTraits<T>::UnsignedType;
    using ScalarUnsignedType = typename FPShape<T>::ScalarUnsignedType;

    // Determine the largest element by absolute magnitude. Sign is ignored, and
    // NaN compares as higher than any other value.
    const UnsignedType au = detail::cast::as<UnsignedType>(p);
    const UnsignedType abs_au = au & FPShape<T>::InverseSignMask();
    ScalarUnsignedType max_mag_au = abs_au[0];
    for (size_t i = 1; i < num_elements; ++i) {
      const ScalarUnsignedType absElem_au = abs_au[i];
      if (max_mag_au < absElem_au) max_mag_au = absElem_au;
    }
    const ElementType max_mag = detail::cast::as<ElementType>(max_mag_au);

    if (max_mag == 0) {
      // If all elements were zero, handle this specially by returning the
      // vector unmodified.
      return p;
    }

    if (__abacus_isinf(max_mag)) {
      // If any element was infinity, and no element was NaN, handle this
      // specially by flushing each finite element to zero, and each infinite
      // element to one.
      p = __abacus_copysign(__abacus_select(T(0.0), T(1.0), __abacus_isinf(p)),
                            p);
    } else {
      // Otherwise, take the largest exponent that guarantees no overflow will
      // occur, and try to scale p so that its largest element will have that
      // exponent.
      static constexpr ElementType max = TypeTraits<ElementType>::max();
      static constexpr ElementType elem_upper_limit = []() -> ElementType {
        if (sizeof(ElementType) == 2) return 0x1.ffcp6;
        if (sizeof(ElementType) == 4) return 0x1.fffffep62;
        if (sizeof(ElementType) == 8) return 0x1.fffffffffffffp510;
        return max;
      }();
      static_assert(elem_upper_limit * elem_upper_limit * num_elements <= max);
      const ScalarUnsignedType max_au =
          detail::cast::as<ScalarUnsignedType>(max);
      ScalarUnsignedType scale_factor_au =
          detail::cast::as<ScalarUnsignedType>(elem_upper_limit) - max_mag_au +
          detail::cast::as<ScalarUnsignedType>(ElementType(1.0));

      // If max_mag is tiny, just go for the largest scale factor we can use.
      if (scale_factor_au > max_au) {
        scale_factor_au = max_au;
      }

      // Ensure we have a power of two so that the multiplication is exact.
      scale_factor_au &= FPShape<T>::ExponentMask();

      const ElementType scale_factor =
          detail::cast::as<ElementType>(scale_factor_au);
      p *= scale_factor;
    }

    p = geometric::fast_normalize<T>(p);
    return p * __abacus_rsqrt(geometric::dot<T>(p, p));
  }
}

}  // namespace geometric
}  // namespace detail
}  // namespace abacus

#endif  //__ABACUS_DETAIL_GEOMETRIC__
