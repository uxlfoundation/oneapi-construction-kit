// Copyright (C) Codeplay Software Limited
//
// Licensed under the Apache License, Version 2.0 (the "License") with LLVM
// Exceptions; you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/uxlfoundation/oneapi-construction-kit/blob/main/LICENSE.txt
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
//
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
// @generate_autogen@

/// @file
///
/// Abacus configuration.

#ifndef __ABACUS_DETAIL_CAST__
#define __ABACUS_DETAIL_CAST__

#ifndef __ABACUS_ABACUS_CONFIG__
#include <abacus/abacus_config.h>
#endif

#ifndef __ABACUS_TYPE_TRAITS__
#include <abacus/abacus_type_traits.h>
#endif

#ifdef __cplusplus
#ifndef __OPENCL_VERSION__
#include <string.h>
#endif

#ifndef __has_builtin
#define __has_builtin(x) 0  // Compatibility with non-clang compilers
#endif

namespace abacus {
namespace detail {
namespace cast {
template<typename T, typename U, unsigned N = TypeTraits<T>::num_elements>
  struct convert_helper {
  /// @brief Convert between vector types.
  /// @param[in] u operand.
  /// @return converted operand.
  static T _(const U& u) {
#if defined(__OPENCL_VERSION__) && __has_builtin(__builtin_convertvector)
    return __builtin_convertvector(u, T);
#else
    T t{};
    for (unsigned i = 0; i < N; i++) {
      t[i] = (typename TypeTraits<T>::ElementType)u[i];
    }
    return t;
#endif
  }
};

template<typename T, typename U> struct convert_helper<T, U, 1> {
  /// @brief Convert between scalar types.
  /// @param[in] u operand.
  /// @return converted operand.
  static T _(const U& u) {
    return (T)u;
  }
};

/// @brief Convert between types (including vectors).
/// @param[in] u operand.
/// @return converted operand.
template<typename T, typename U> T convert(const U& u) {
  return convert_helper<T, U>::_(u);
}

template<typename T, typename U, bool SIZE_OK = sizeof(T) == sizeof(U)>
  struct as_helper;

template<typename T, typename U> struct as_helper<T, U, true> {
  static T _(const U& u) {
    T t{};
#ifdef __OPENCL_VERSION__
    __builtin_memcpy(&t, &u, sizeof(U));
#elif defined(__cplusplus)
    memcpy(&t, &u, sizeof(U));
#endif
    return t;
  }
};

/// @brief Bitcast between types (including vectors).
/// @param[in] u operand.
/// @return converted operand.
template<typename T, typename U> T as(const U& u) {
  return as_helper<T, U>::_(u);
}
}
}
}
#endif

#endif  //__ABACUS_DETAIL_CAST__
