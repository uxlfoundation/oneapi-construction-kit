// Copyright (C) Codeplay Software Limited
//
// Licensed under the Apache License, Version 2.0 (the "License") with LLVM
// Exceptions; you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/uxlfoundation/oneapi-construction-kit/blob/main/LICENSE.txt
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
//
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#include <cstring>

#include "builtins/bakery.h"
#include "builtins/resources.h"

namespace builtins {
cargo::array_view<const uint8_t> get_api_src_file() {
  return rc::builtins::builtins_h;
}

#ifdef CL_VERSION_3_0
cargo::array_view<const uint8_t> get_api_30_src_file() {
  return rc::builtins::builtins_3_0_h;
}
#endif

cargo::array_view<const uint8_t> get_api_force_file_device(
    const char *const DeviceName) {
  // Begin auto-generated boilerplate
@get_force_header_src@
  // End auto-generated boilerplate
  return {};
}

cargo::array_view<const uint8_t> get_pch_file(
    file::capabilities_bitfield Caps) {
  cargo::array_view<const uint8_t> Resource;
  switch (Caps) {
    case file::CAPS_32BIT | file::CAPS_FP64 | file::CAPS_FP16:
      Resource = rc::builtins::builtins32_fp64_fp16_pch;
      break;
    case file::CAPS_32BIT | file::CAPS_FP64:
      Resource = rc::builtins::builtins32_fp64_pch;
      break;
    case file::CAPS_32BIT | file::CAPS_FP16:
      Resource = rc::builtins::builtins32_fp16_pch;
      break;
    case file::CAPS_32BIT:
      Resource = rc::builtins::builtins32_pch;
      break;
    case file::CAPS_FP64 | file::CAPS_FP16:
      Resource = rc::builtins::builtins64_fp64_fp16_pch;
      break;
    case file::CAPS_FP64:
      Resource = rc::builtins::builtins64_fp64_pch;
      break;
    case file::CAPS_FP16:
      Resource = rc::builtins::builtins64_fp16_pch;
      break;
    case file::CAPS_DEFAULT:
      Resource = rc::builtins::builtins64_pch;
      break;
    default:
      (void)fprintf(stderr, "Illegal capabilities_bitfield\n");
      abort();
  }
  if (Resource.size() == 1) {
    (void)fprintf(
        stderr,
        "Attempted to load an unavailable PCH file with capabilities:\n");
    (void)fprintf(stderr, "Bit width: %d\n",
                  (Caps & file::CAPS_32BIT) ? 32 : 64);
    (void)fprintf(stderr, "Doubles: %s\n",
                  (Caps & file::CAPS_FP64) ? "Enabled" : "Disabled");
    (void)fprintf(stderr, "Halfs: %s\n",
                  (Caps & file::CAPS_FP16) ? "Enabled" : "Disabled");
    (void)fprintf(
        stderr,
        "This usually indicates that the device capabilities were "
        "incorrectly listed in the target device's CMakeLists.txt.\n");
    abort();
  }
  return Resource;
}

cargo::array_view<const uint8_t> get_bc_file(file::capabilities_bitfield Caps) {
  cargo::array_view<const uint8_t> Resource;
  switch (Caps) {
    case file::CAPS_32BIT | file::CAPS_FP64 | file::CAPS_FP16:
      Resource = rc::builtins::builtins32_fp64_fp16_bc;
      break;
    case file::CAPS_32BIT | file::CAPS_FP64:
      Resource = rc::builtins::builtins32_fp64_bc;
      break;
    case file::CAPS_32BIT | file::CAPS_FP16:
      Resource = rc::builtins::builtins32_fp16_bc;
      break;
    case file::CAPS_32BIT:
      Resource = rc::builtins::builtins32_bc;
      break;
    case file::CAPS_FP64 | file::CAPS_FP16:
      Resource = rc::builtins::builtins64_fp64_fp16_bc;
      break;
    case file::CAPS_FP64:
      Resource = rc::builtins::builtins64_fp64_bc;
      break;
    case file::CAPS_FP16:
      Resource = rc::builtins::builtins64_fp16_bc;
      break;
    case file::CAPS_DEFAULT:
      Resource = rc::builtins::builtins64_bc;
      break;
    default:
      (void)fprintf(stderr, "Illegal capabilities_bitfield\n");
      abort();
  }
  if (Resource.size() == 1) {
    (void)fprintf(
        stderr,
        "Attempted to load an unavailable BC file with capabilities:\n");
    (void)fprintf(stderr, "Bit width: %d\n",
                  (Caps & file::CAPS_32BIT) ? 32 : 64);
    (void)fprintf(stderr, "Doubles: %s\n",
                  (Caps & file::CAPS_FP64) ? "Enabled" : "Disabled");
    (void)fprintf(stderr, "Halfs: %s\n",
                  (Caps & file::CAPS_FP16) ? "Enabled" : "Disabled");
    (void)fprintf(
        stderr,
        "This usually indicates that the device capabilities were "
        "incorrectly listed in the target device's CMakeLists.txt.\n");
    abort();
  }
  return Resource;
}

}  // namespace builtins
