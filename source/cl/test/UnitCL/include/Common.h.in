// Copyright (C) Codeplay Software Limited
//
// Licensed under the Apache License, Version 2.0 (the "License") with LLVM
// Exceptions; you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/uxlfoundation/oneapi-construction-kit/blob/main/LICENSE.txt
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
//
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#ifndef UNITCL_COMMON_H
#define UNITCL_COMMON_H

#include <CL/cl.h>
#include <CL/cl_ext.h>
#include <CL/cl_ext_codeplay.h>
#include <gtest/gtest.h>

#include <array>
#include <cstdint>
#include <sstream>
#include <string>
#include <vector>

#include "cargo/optional.h"
#include "cargo/string_view.h"
#include "kts/execution.h"
#include "ucl/assert.h"
#include "ucl/callbacks.h"
#include "ucl/checks.h"
#include "ucl/enums.h"
#include "ucl/fixtures.h"
#include "ucl/types.h"
#include "ucl/version.h"

#cmakedefine CA_ENABLE_OUT_OF_ORDER_EXEC_MODE

// GCC lambdas are only convertible to function pointers of the specified
// calling convention, and require the correct calling convention to be
// specified. MSVC lambdas are convertible to function pointers of any calling
// convention, and neither require nor allow the calling convention to be
// specified.
#ifdef __GNUC__
#define CL_LAMBDA_CALLBACK CL_CALLBACK
#else
#define CL_LAMBDA_CALLBACK
#endif  // __GNUC__

#define STR_HELPER(x) #x
#define STR(x) STR_HELPER(x)

namespace UCL {

bool print_opencl_platform_and_device_info(const cl_device_type device_type);

// END TNEX

/// @brief Allocate an aligned block of heap memory.
///
/// This function is designed to match the interface of C11's aligned_alloc.
///
/// @remark Due to platform specific limitations of aligned allocator functions
/// the actual alignment of the returned void pointer may be larger than the
/// value passed to the @a align parameter, it is however guaranteed to be a
/// multiple of the @a align.
///
/// @param align Allocation alignment in bytes, this must be an even number.
/// @param bytes Size in bytes of the allocation.
///
/// @return Return pointer to allocated memory.
void *aligned_alloc(uint32_t align, size_t bytes);

/// @brief Free an aligned block of heap memory.
///
/// @param ptr Pointer to allocated memory.
void aligned_free(void *ptr);

// @brief Custom aligned allocator to use in STL containers for data types that
// require aligned allocation. The allocation is aligned on the size of the data
// type.
template <typename T, size_t Align = alignof(T)>
struct aligned_allocator {
  typedef T value_type;
  typedef T *pointer;
  typedef const T *const_pointer;
  typedef T &reference;
  typedef const T &const_reference;
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;

  template <class U, size_t A = alignof(U)>
  aligned_allocator(const aligned_allocator<U, A> &) {}

  T *allocate(size_t n) {
    return static_cast<T *>(UCL::aligned_alloc(Align, n * sizeof(T)));
  }

  void deallocate(T *p, size_t n) {
    (void)n;
    UCL::aligned_free(static_cast<void *>(p));
  }

  aligned_allocator() {};
  template <class U>
  struct rebind {
    using other = aligned_allocator<U, Align>;
  };
};

/// @brief UCL::vector provides std::vector with a custom aligned allocator for
/// vector types.
template <typename T, size_t Align = alignof(T)>
using vector = std::vector<T, aligned_allocator<T, Align>>;

/// @brief Helper function to handle unknown enumeration cases.
///
/// Returns a somewhat useful string for unhandled error codes,
/// device/platform/program queries.
///
/// @param[in] Query type (error code|device query|platform query
/// program query)
/// @return String message for unhandled case.
std::string handleUnhandledCase(const std::string &type, cl_int enum_value);
/// @brief Translate OpenCL device query integer into string.
///
/// The `CL_DEVICE.*` queries are preproccessor defines that aren't very
/// useful as debug output. This function translates them back into their
/// string representation.
///
/// @param[in] Query type (error code|device query|platform query
/// program query)
/// @return String message for unhandled case.
std::string deviceQueryToString(cl_device_info query);

/// @brief Translate OpenCL program query integer into string.
///
/// The `CL_PROGRAM.*` queries are preproccessor defines that aren't very
/// useful as debug output. This function translates them back into their
/// string representation.
///
/// @param[in] Query type (error code|device query|platform query
/// program query)
/// @return String message for unhandled case.
std::string programQueryToString(cl_program_info query);

/// @brief Translate OpenCL platform query integer into string.
///
/// The `CL_PLATFORM.*` queries are preproccessor defines that aren't very
/// useful as debug output. This function translates them back into their
/// string representation.
///
std::string platformQueryToString(cl_platform_info query);

/// @brief Translate OpenCL program build query integer into string.
///
/// The `CL_PROGRAM_BUILD.*` queries are preproccessor defines that aren't very
/// useful as debug output. This function translates them back into their
/// string representation.
/// @param[in] Query type (error code|device query|platform query
/// program query|program build query)
/// @return String message for unhandled case.
std::string programBuildQueryToString(cl_program_build_info query);

/// @brief Translate OpenCL mem object query integer into string.
///
/// The `CL_MEM.*` queries are preproccessor defines that aren't very
/// useful as debug output. This function translates them back into their
/// string representation.
///
/// @param[in] query Query type.
/// @return String message for unhandled case.
std::string memObjectQueryToString(cl_mem_info query);

/// @brief Translate OpenCL command queue query integer into string.
///
/// The `CL_QUEUE.*` queries are preproccessor defines that aren't very
/// useful as debug output. This function translates them back into their
/// string representation.
///
/// @param[in] query Query type.
/// @return String message for unhandled case.
std::string commandQueueQueryToString(cl_command_queue_info query);

/// @brief Translate OpenCL event profiling query integer into string.
///
/// The `CL_PROFILING.*` queries are preproccessor defines that aren't very
/// useful as debug output. This function translates them back into their
/// string representation.
///
/// @param[in] query Query type.
/// @return String message for unhandled case.
std::string profilingQueryToString(cl_profiling_info query);

/// @brief Helper function to verify an OpenCL version string is conformant.
///
/// The standard requires that a string returned from clGetPlatformInfo with
/// the CL_PLATFORM_VERSION query, or from clGetDeviceInfo with the
/// CL_DEVICE_VERSION query must be of the form "OpenCL<space><major_version.
/// minor_version><space><platform-specific information>. This function returns
/// true if this is the case, false otherwise.
///
/// @param[in] OpenCL version string to verify.
/// @return True if string is conformant, false otherwise.
bool verifyOpenCLVersionString(const std::string &opencl_version_string);

/// @brief Helper function to verify an OpenCL C version string is conformant.
///
/// The standard requires that a string returned from clGetDeviceInfo with
/// the CL_DEVICE_OPENCL_C_VERSION query must be of the form "OpenCL<space>C
/// <major_version.minor_version><space><platform-specific information>. This
/// function returns true if this is the case, false otherwise.
///
/// @param[in] OpenCL C version string to verify.
/// @return True if string is conformant, false otherwise.
bool verifyOpenCLCVersionString(const std::string &opencl_c_version_string);

/// @brief Helper function to parse an OpenCL version string.
///
/// Takes an OpenCL version string and returns the (Major, Minor) version
/// pair. If the string is not conformant to the spec an empty optional
/// object is returned.
///
/// @param[in] opencl_version_string The OpenCL version string to be parsed.
/// @return Optional object containing either the numeric version or empty if
/// the string is non-conformant.
cargo::optional<std::pair<int, int>> parseOpenCLVersionString(
    const std::string &opencl_version_string);

class ExecStatus {
 public:
  ExecStatus(cl_int exec_status) : exec_status(exec_status) {}

  bool operator==(const ExecStatus &other) const {
    return exec_status == other.exec_status;
  }

  bool operator<=(const ExecStatus &other) const {
    return exec_status <= other.exec_status;
  }

  bool operator>=(const ExecStatus &other) const {
    return exec_status >= other.exec_status;
  }

  cl_int exec_status;
};

inline std::ostream &operator<<(std::ostream &os,
                                const ExecStatus &exec_status) {
  switch (exec_status.exec_status) {
#define CASE(STATUS) \
  case STATUS:       \
    os << #STATUS;   \
    break;
    CASE(CL_COMPLETE)
    CASE(CL_RUNNING)
    CASE(CL_SUBMITTED)
    CASE(CL_QUEUED)
#undef CASE
    default: {
      os << "Unknown execution status" << exec_status.exec_status;
    }
  }
  return os;
}

#ifndef ASSERT_EQ_EXECSTATUS
#define ASSERT_EQ_EXECSTATUS(EXPECTED, ACTUAL) \
  ASSERT_EQ(UCL::ExecStatus(EXPECTED), UCL::ExecStatus(ACTUAL))
#endif  // ASSERT_EQ_EXECSTATUS

#ifndef ASSERT_LE_EXECSTATUS
#define ASSERT_LE_EXECSTATUS(EXPECTED, ACTUAL) \
  ASSERT_LE(UCL::ExecStatus(EXPECTED), UCL::ExecStatus(ACTUAL))
#endif  // ASSERT_LE_EXECSTATUS

#ifndef ASSERT_GE_EXECSTATUS
#define ASSERT_GE_EXECSTATUS(EXPECTED, ACTUAL) \
  ASSERT_GE(UCL::ExecStatus(EXPECTED), UCL::ExecStatus(ACTUAL))
#endif  // ASSERT_GE_EXECSTATUS

cl_uint getNumPlatforms();

cl_platform_id *getPlatforms();

cl_uint getNumDevices();

cl_device_id *getDevices();

/// @brief Check whether a device supports a given local work group size.
///
/// Note that although this will operate correctly for any input, it doesn't
/// necessarily need to be used for local work group sizes that are guaranteed
/// to always work, e.g. {1, 1, 1} or nullptr.  It is up to the test writer.
/// @param[in] device The OpenCL device to check properties against.
/// @param[in] work_dim Same as @p work_dim passed to clEnqueueNDRangeKernel.
/// @param[in] local_work_size Same as @p local_work_size passed to
/// clEnqueueNDRangeKernel.
bool hasLocalWorkSizeSupport(cl_device_id device, cl_uint work_dim,
                             const size_t *local_work_size);

/// @brief Check if the device at index 'device' supports denormal numbers
/// @param[in] device - The index of the device in getDevices()
/// @param[in] precision - Precision of float to check denormal support for,
///                        one of `CL_DEVICE_{HALF,SINGLE,DOUBLE}_FP_CONFIG`
/// @return True if the device supports denormals at specified precision
bool hasDenormSupport(cl_device_id device, cl_uint precision);

/// @brief Check if the device at index 'device' has half support
/// @param[in] device - The index of the device in getDevices()
/// @return True if the device has half support, false otherwise
bool hasHalfSupport(cl_device_id device);

/// @brief Check if the device at index 'device' has double support
/// @param[in] device - The index of the device in getDevices()
/// @return True if the device has double support, false otherwise
bool hasDoubleSupport(cl_device_id device);

/// @brief Check if the device at index 'device' has Atomic64 support
/// @param[in] device - The index of the device in getDevices()
/// @return True if the device has Atomic64 support, false otherwise
bool hasAtomic64Support(cl_device_id device);

/// @brief Check if the device at index 'device' has a compiler available
/// @param[in] device - The index of the device in getDevices()
/// @return True if the device has a compiler, false otherwise
bool hasCompilerSupport(cl_device_id device);

/// @brief Get the name of the given device.
///
/// @param device Device to get the name of.
///
/// @return Returns the name of the device.
std::string getDeviceName(cl_device_id device);

/// @brief Return the number of address bits for a given device.
/// @param[in] device The device to check
/// @return 32 or 64 on success, maximum representable value on error.
cl_uint getDeviceAddressBits(cl_device_id device);

/// @brief The user provided path to find the test include file.
/// @return The provided path, or "" is no path was provided.
std::string getTestIncludePath();

/// @brief A sub-dir of the user provided path, guaranteed to contain spaces.
/// @return A path that contains spaces, specified using quotes.
std::string getTestIncludePathWithQuotedSpaces();

/// @brief A sub-dir of the user provided path, guaranteed to contain spaces.
/// @return A path that contains spaces, specified using backslashes.
std::string getTestIncludePathWithBackslashedSpaces();

/// @brief Whether or not the user provided an include path to use.
/// @return True if the user provided an include path, false otherwise.
bool hasTestIncludePath();

/// @brief Run tests to ensure include files needed for tests exist.
void checkTestIncludePath();

/// @brief Check if the given device has the specified name.
bool isDeviceName(cl_device_id device, const char *name);

/// @brief Check the device in use by `Environment` supports an OpenCL version.
///
/// Both major and minor version numbers are taken into account, see
/// UCL::Version for details.
///
/// @return True only if `Environment`'s device version is at least `version`.
bool isDeviceVersionAtLeast(ucl::Version version);

/// @brief Check if the platform in use by `Environment` is of the given
/// version.
///
/// @param version_string String containing the version to match, can be the
/// whole version string or a substring thereof.
/// @return True if the `Environment`'s platform version matches the given
/// string.
bool isPlatformVersion(const char *version_string);

bool hasImageSupport(cl_device_id device);

bool isImageFormatSupported(cl_context context,
                            const UCL::vector<cl_mem_flags> &flags_list,
                            cl_mem_object_type type,
                            const cl_image_format &format);

bool hasCorrectlyRoundedDivideSqrtSupport(cl_device_id device);

bool hasSubDeviceSupport(cl_device_id device);

bool hasNativeKernelSupport(cl_device_id device);

bool hasDevicePartitionSupport(cl_device_id device,
                               const cl_device_partition_property property);

/// @brief Check if a compile option is present in `CA_EXTRA_COMPILE_OPTS`.
///
/// @param option Compile option to check.
///
/// @return Returns true if `CA_EXTRA_COMPILE_OPTS` is set and option is found,
/// false otherwise.
bool isExtraCompileOptEnabled(std::string option);

/// @brief Detect if OpenCL-Intercept-Layer environment variable is set.
///
/// This assumes that the OpenCL-Intercept-Layer is being used when the
/// `CLI_OpenCLFileName` environment variable exists. This is not the most
/// robust solution as the OpenCL-Intercept-Layer does not require the
/// environment variable to be set but it's unclear if there is a better way.
///
/// @return Returns true if `CLI_OpenCLFileName` is detected, false otherwise.
bool isInterceptLayerPresent();

/// @brief Check if an OpenCL-Intercept-Layer control is enabled.
///
/// Individual controls may affect tests which exhibit different behaviour for
/// programs created in different ways, by being able to discover which mode
/// the OpenCL-Intercept-Layer is being run in, e.g. "InjectProgramBinaries",
/// it is possible to disable compile time requirements for tests in the
/// Execution framework such as vecz being run.
///
/// @param control Name of the control to check for being enabled.
///
/// @return Returns true if the control environment variable was set to a
/// non-zero value, false otherwise.
bool isInterceptLayerControlEnabled(std::string control);

/// @brief Queries whether the queue is in order.
///
/// Returns true if the queue is "in order", false otherwise.
///
/// @param[in] command_queue queue to query for whether it is "in order".
bool isQueueInOrder(cl_command_queue command_queue);

size_t getTypeSize(const char *const type);

// Test environment enforces that one platform exists, using that.
bool hasPlatformExtensionSupport(const char *extension_name);

bool hasDeviceExtensionSupport(cl_device_id device, const char *extension_name);

/// @brief      Does the device support at least OpenCL C 1.0.
/// @type       Method.
/// @param[in]  device - device to query.
/// @return     true.
/// @gotchas    Assumes that OpenCL C 1.0 is always supported.
/// @author     Bjoern Knafla.
/// @changes    None.
bool hasSupportForOpenCL_C_1_0(cl_device_id device);

/// @brief      Does the device support at least OpenCL C 1.1.
/// @type       Method.
/// @param[in]  device - device to query.
/// @return     true if OpenCL C 1.1 is supported, false otherwise.
/// @gotchas    None.
/// @author     Bjoern Knafla.
/// @changes    None.
bool hasSupportForOpenCL_C_1_1(cl_device_id device);

/// @brief      Does the device support at least OpenCL C 1.2.
/// @type       Method.
/// @param[in]  device - device to query.
/// @return     true if OpenCL C 1.2 is supported, false otherwise.
/// @gotchas    None.
/// @author     Bjoern Knafla.
/// @changes    None.
bool hasSupportForOpenCL_C_1_2(cl_device_id device);

/// @brief Build a program and print the build log on failure.
/// @return Returns the result of `clBuildProgram`.
cl_int buildProgram(cl_program program, cl_device_id device_list,
                    const char *options);

/// @brief RAII buffer.
///
/// @tparam Type Element type.
template <typename Type>
struct Buffer {
  /// @brief Construct the buffer object.
  ///
  /// @param size Number of elements in the buffer.
  explicit Buffer(const size_t size)
      : m_size(size), m_payload((0 == size) ? nullptr : new Type[size]) {}

  /// @brief Destroy the buffer object.
  ~Buffer() {
    if (m_payload) {
      delete[] m_payload;
    }
  }

  /// @brief Implicit conversion to pointer to element type.
  ///
  /// @return Return pointer to first element.
  operator Type *() { return m_payload; }

  /// @brief Implicit conversion to const pointer to element type.
  ///
  /// @return Return const pointer to first element.
  operator const Type *() const { return m_payload; }

  /// @brief Get a pointer to the buffer data.
  ///
  /// @return Returns a pointer to first element.
  Type *data() { return m_payload; }

  /// @brief Get a pointer to the buffer data.
  ///
  /// @return Returns a const pointer to first element.
  const Type *data() const { return m_payload; }

  /// @brief Query the number of elements in the buffer.
  ///
  /// @return Return number of elements in buffer.
  size_t size() const { return m_size; }

 private:
  size_t m_size;
  Type *const m_payload;
};

/// @brief RAII buffer with allocation aligned to sizeof(Type).
///
/// @tparam Type Element type.
template <typename Type>
class AlignedBuffer {
 public:
  /// @brief Useful alias for the underlying type matching STL naming
  /// convention.
  using value_type = Type;

  /// @brief Construct the aligned buffer object.
  ///
  /// @param size Number of elements in the buffer.
  explicit AlignedBuffer(const size_t size)
      : m_size(size),
        m_payload(static_cast<Type *>(
            UCL::aligned_alloc(sizeof(Type), sizeof(Type) * size))) {}

  /// @brief Destroy the aligned buffer object.
  ~AlignedBuffer() {
    if (m_payload) {
      UCL::aligned_free(m_payload);
    }
  }

  /// @brief Implicit conversion to pointer to element type.
  ///
  /// @return Return pointer to first element.
  operator Type *() { return m_payload; }

  /// @brief Implicit conversion to pointer to element type.
  ///
  /// @return Return const pointer to first element.
  operator const Type *() const { return m_payload; }

  /// @brief Explicit access to buffer pointer.
  ///
  /// @return Return pointer to first element.
  Type *data() { return m_payload; }

  /// @brief Explicit access to const buffer pointer.
  ///
  /// @return Return const pointer to first element.
  const Type *data() const { return m_payload; }

  /// @brief Query the number of elements in the buffer.
  ///
  /// @return Return number of elements in buffer.
  size_t size() const { return m_size; }

 private:
  size_t m_size;
  Type *const m_payload;
};

namespace cl {
/// @brief RAII wrapper around a cl_mem created from clCreateBuffer.
struct buffer {
  cl_int create(cl_context context, cl_mem_flags flags, size_t size,
                void *host_ptr) {
    cl_int error;
    mem = clCreateBuffer(context, flags, size, host_ptr, &error);
    return error;
  }

  ~buffer() {
    if (mem) {
      EXPECT_SUCCESS(clReleaseMemObject(mem));
    }
  }

  operator cl_mem() { return mem; }

  cl_mem mem = nullptr;
};

}  // namespace cl

struct Program {
  Program(cl_program program) : program{program} {}

  ~Program() {
    if (program) {
      EXPECT_SUCCESS(clReleaseProgram(program));
    }
  }

  Program &operator=(cl_program rhs) {
    program = rhs;
    return *this;
  }

  operator cl_program() { return program; }

  cl_program program = nullptr;
};

}  // namespace UCL

namespace UCL {
size_t getPixelSize(const cl_image_format &format);
#ifdef _MSC_VER
float parse_hexfloat(const char *str);
#endif  // _MSC_VER
}  // namespace UCL

#ifdef _MSC_VER
#define HFLOAT(H) UCL::parse_hexfloat(#H)
#else
#define HFLOAT(H) H
#endif  // _MSC_VER

namespace UCL {
bool isDevice(cl_device_id device, const char *check_device_prefix,
              cl_device_type check_device_type);
// This function returns true if the event execution status is set to
// CL_COMPLETE return false otherwise
bool hasCommandExecutionCompleted(cl_event event);
}  // namespace UCL

// Implements type traits that are useful when writing OpenCL tests.
namespace UCL {
template <typename T>
struct is_cl_vector : public std::false_type {};

// char
template <>
struct is_cl_vector<cl_char2> : public std::true_type {};

// cl_char3 is just an alias of cl_char4.

template <>
struct is_cl_vector<cl_char4> : public std::true_type {};

template <>
struct is_cl_vector<cl_char8> : public std::true_type {};

template <>
struct is_cl_vector<cl_char16> : public std::true_type {};

// uchar
template <>
struct is_cl_vector<cl_uchar2> : public std::true_type {};

// cl_uchar3 is just an alias of cl_uchar4.

template <>
struct is_cl_vector<cl_uchar4> : public std::true_type {};

template <>
struct is_cl_vector<cl_uchar8> : public std::true_type {};

template <>
struct is_cl_vector<cl_uchar16> : public std::true_type {};

// short
template <>
struct is_cl_vector<cl_short2> : public std::true_type {};

// cl_char3 is just an alias of cl_char4.

template <>
struct is_cl_vector<cl_short4> : public std::true_type {};

template <>
struct is_cl_vector<cl_short8> : public std::true_type {};

template <>
struct is_cl_vector<cl_short16> : public std::true_type {};

// ushort
template <>
struct is_cl_vector<cl_ushort2> : public std::true_type {};

// cl_ushort3 is just an alias of cl_ushort4.

template <>
struct is_cl_vector<cl_ushort4> : public std::true_type {};

template <>
struct is_cl_vector<cl_ushort8> : public std::true_type {};

template <>
struct is_cl_vector<cl_ushort16> : public std::true_type {};

// int
template <>
struct is_cl_vector<cl_int2> : public std::true_type {};

// cl_int3 is just an alias of cl_int4.

template <>
struct is_cl_vector<cl_int4> : public std::true_type {};

template <>
struct is_cl_vector<cl_int8> : public std::true_type {};

template <>
struct is_cl_vector<cl_int16> : public std::true_type {};

// uint
template <>
struct is_cl_vector<cl_uint2> : public std::true_type {};

// cl_uint3 is just an alias of cl_uint4.

template <>
struct is_cl_vector<cl_uint4> : public std::true_type {};

template <>
struct is_cl_vector<cl_uint8> : public std::true_type {};

template <>
struct is_cl_vector<cl_uint16> : public std::true_type {};

// int
template <>
struct is_cl_vector<cl_long2> : public std::true_type {};

// cl_long3 is just an alias of cl_long4.

template <>
struct is_cl_vector<cl_long4> : public std::true_type {};

template <>
struct is_cl_vector<cl_long8> : public std::true_type {};

template <>
struct is_cl_vector<cl_long16> : public std::true_type {};

// ulong
template <>
struct is_cl_vector<cl_ulong2> : public std::true_type {};

// cl_ulong3 is just an alias of cl_ulong4.

template <>
struct is_cl_vector<cl_ulong4> : public std::true_type {};

template <>
struct is_cl_vector<cl_ulong8> : public std::true_type {};

template <>
struct is_cl_vector<cl_ulong16> : public std::true_type {};
}  // namespace UCL

inline std::ostream &operator<<(std::ostream &out,
                                const cl_image_format &format) {
  out << "cl_image_format{.image_channel_order{";
  switch (format.image_channel_order) {
#define CASE(ORDER) \
  case ORDER:       \
    out << #ORDER;  \
    break;
    CASE(CL_R)
    CASE(CL_Rx)
    CASE(CL_A)
    CASE(CL_INTENSITY)
    CASE(CL_LUMINANCE)
    CASE(CL_RG)
    CASE(CL_RGx)
    CASE(CL_RA)
    CASE(CL_RGB)
    CASE(CL_RGBx)
    CASE(CL_RGBA)
    CASE(CL_ARGB)
    CASE(CL_BGRA)
#undef CASE
    default:
      out << format.image_channel_order;
      break;
  }
  out << "}, .image_channel_data_type{";
  switch (format.image_channel_data_type) {
#define CASE(TYPE) \
  case TYPE:       \
    out << #TYPE;  \
    break;
    CASE(CL_SNORM_INT8)
    CASE(CL_SNORM_INT16)
    CASE(CL_UNORM_INT8)
    CASE(CL_UNORM_INT16)
    CASE(CL_UNORM_SHORT_565)
    CASE(CL_UNORM_SHORT_555)
    CASE(CL_UNORM_INT_101010)
    CASE(CL_SIGNED_INT8)
    CASE(CL_SIGNED_INT16)
    CASE(CL_SIGNED_INT32)
    CASE(CL_UNSIGNED_INT8)
    CASE(CL_UNSIGNED_INT16)
    CASE(CL_UNSIGNED_INT32)
    CASE(CL_HALF_FLOAT)
    CASE(CL_FLOAT)
#undef CASE
    default:
      out << format.image_channel_data_type;
      break;
  }
  out << "}}";
  return out;
}

#endif  // UNITCL_COMMON_H
