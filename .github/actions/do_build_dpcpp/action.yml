name: build dpc++
description: build dpc++

inputs:
  target:
    description: 'target architecture'
  create_dpcpp_artefact_method:
    description: 'build | download_release' # TODO: add support for 'previous workflow' download
    type: string
    default: "build"

runs:
  using: "composite"
  steps:
    - name: calc vars
      id: calc_vars
      uses: ./.github/actions/calc_vars
      with:
        target: ${{ inputs.target }}  

    - name: Install Ninja
      uses: llvm/actions/install-ninja@main

    - name: Install spirv tools
      shell: bash
      run:    
        sudo apt-get install spirv-tools
    
    - name: clone dpc++
      if: inputs.create_dpcpp_artefact_method == 'build'
      uses: actions/checkout@v4
      with:
        repository: intel/llvm
        path: llvm

    - name: dpcpp configure
      if: inputs.create_dpcpp_artefact_method == 'build'
      shell: bash
      run:
        cd llvm; python buildbot/configure.py
        -o build
        --host-target="X86;AArch64;RISCV"
        --native_cpu
        --llvm-external-projects=lld
        --cmake-opt=-DNATIVECPU_USE_OCK=ON
        --cmake-opt=-DLLVM_ENABLE_ZLIB=OFF
        --cmake-opt=-DLLVM_ENABLE_ZSTD=OFF

    - name: build sycl-headers
      if: inputs.create_dpcpp_artefact_method == 'build'
      shell: bash
      run:
        cmake --build llvm/build -- sycl-headers
  
    - name: build dpc plus plus
      if: inputs.create_dpcpp_artefact_method == 'build'
      shell: bash
      run:
       python llvm/buildbot/compile.py -o llvm/build -v -j 8

    - name: build extra utilties
      if: inputs.create_dpcpp_artefact_method == 'build'
      # Build various utilities, since those aren't proper dependencies.
      # FileCheck and not are needed for tests. The rest are needed for
      # cross builds. They are enabled on all targets for consistency.
      shell: bash
      run:
       cmake --build llvm/build -- FileCheck clang-tblgen
        libclc-remangler llvm-as llvm-min-tblgen llvm-tblgen not
        opt prepare_builtins -j8

    - name: copy utilities
      if: inputs.create_dpcpp_artefact_method == 'build'
      shell: bash
      run:
        cd llvm/build/bin;
        cp FileCheck clang-tblgen libclc-remangler llvm-as llvm-min-tblgen
        llvm-tblgen not opt prepare_builtins ../install/bin

    # TODO: For now just linux x86_64
    #       Review for location of components (paths) and any archive package/unpackage reqs.
    #- name: install config files to pick up libraries for cross compilation.
    #  if: inputs.create_dpcpp_artefact_method == 'build'
    #  shell: bash
    #  run: |
    #    echo Installing configuration files
    #    cd llvm/build/bin
    #    # Install configuration files to pick up libraries for cross compilation.
    #    for arch in x86_64 aarch64 riscv64; do
    #      echo "
    #      -L<CFGDIR>/../../../$arch-linux/install/lib
    #      -fsycl-libdevice-path=<CFGDIR>/../../../$arch-linux/install/lib
    #      -fsycl-libspirv-path=<CFGDIR>/../../../$arch-linux/install/lib/clc/remangled-l64-signed_char.libspirv-$arch-unknown-linux-gnu.bc
    #      " >../install/bin/$arch-unknown-linux-gnu.cfg;
    #    done

    - name: download dpc plus plus
      if: inputs.create_dpcpp_artefact_method == 'download_release'
      shell: bash
      run: |
        mkdir -p llvm/build/install
        cd llvm/build/install
        # Get latest build - go back 2 weeks max else fail
        for COUNTER in {0..13}; do
            DATESTAMP=$(date -d "-$COUNTER day" '+%Y-%m-%d')
            wget -q https://github.com/intel/llvm/releases/download/nightly-$DATESTAMP/sycl_linux.tar.gz && echo Using DPC++ release build: $DATESTAMP && break
        done
        tar xf sycl_linux.tar.gz
        rm sycl_linux.tar.gz

    - name: package artefacts  # package/unpackage avoids known 'permissions loss' issue
      shell: bash
      run: |
        cd llvm/build/install
        tar cf dpcpp.tar *

    - name: upload dpcpp artifact
      uses: actions/upload-artifact@v4
      with:
        name: dpcpp_${{inputs.target}}
        path: llvm/build/install/dpcpp.tar
        retention-days: 1
