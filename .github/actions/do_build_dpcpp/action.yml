name: build dpc++
description: build dpc++

inputs:
  target:
    description: 'target architecture'
  download_dpcpp_artefact:
    description: 'download ock artefact rather than building, of form <target>=id;<target2=id2>. Special value of download_release applies to all targets.'
    type: string
    default: "build"
  save_cache:
    description: 'save cache for build'
    type: boolean
    default: false
  dpcpp_repo_pr_no:
    description: 'dpc++ repo ref: enter PR number (else default branch is used)'
    type: string
    default: ""

runs:
  using: "composite"
  steps:
    - name: calc vars
      id: calc_vars
      uses: ./.github/actions/calc_vars
      with:
        target: ${{ inputs.target }}  

    - name: clone dpc++
      if: contains(inputs.download_dpcpp_artefact, inputs.target) != true
      uses: actions/checkout@v4
      with:
        repository: intel/llvm
        path: llvm

    - name: merge PR ref (via temporary branch 'pr_branch') into default branch (sycl)
      if: inputs.dpcpp_repo_pr_no != ''
      shell: bash
      run: |
        cd llvm
        git config user.email "me@example.com"
        git config user.name "me"
        git fetch origin --depth=2147483647 # deepen shallow repo clone
        git fetch origin pull/${{ inputs.dpcpp_repo_pr_no }}/head:pr_branch
        git merge pr_branch sycl

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@63069e3931dedbf3b63792097479563182fe70d1 # v1.2.18
      with:
        max-size: 1000M
        key: ccache-dpcpp-build-${{ inputs.target }}
        variant: ccache
        save: ${{ inputs.save_cache }}

    # Note: checkout action (above) cleans "path:". Do native artifact download/unpackage after that.

    - name: download pre-built native dpc++ artifact for cross builds
      if: contains(inputs.download_dpcpp_artefact, inputs.target) != true && contains(inputs.target, 'host_riscv')
      uses: ./.github/actions/download_artifact
      with:
        name: 'dpcpp_host_x86_64_linux'
        path: llvm/build/x86_64-linux/install
        needs_tar: 'true'
        run_id: ${{ github.run_id }}

    - name: apply patches
      if: contains(inputs.download_dpcpp_artefact, inputs.target) != true    
      shell: bash
      run: |
        git -C llvm log -1
        for patch in $GITHUB_WORKSPACE/scripts/testing/patches/DPCPP-*.patch
        do
          if test -f "$patch"
          then
            echo "Applying ${patch##*/}"
            git -C llvm apply "$patch"
          fi
        done

    - name: dpcpp configure
      if: contains(inputs.download_dpcpp_artefact, inputs.target) != true
      shell: bash
      run: |
        CROSS_OPTS=""
        if [[ "${{inputs.target}}" =~ .*riscv64.* ]] ; then
          CROSS_OPTS="--cmake-opt=-DCMAKE_TOOLCHAIN_FILE=${{steps.calc_vars.outputs.toolchain}} \
                      --cmake-opt=-DLLVM_HOST_TRIPLE=${{steps.calc_vars.outputs.arch}}-unknown-linux-gnu \
                      --cmake-opt=-DLLVM_NATIVE_TOOL_DIR=$GITHUB_WORKSPACE/llvm/build/x86_64-linux/install/bin"
        fi
        cd llvm
        set -x
        python3 buildbot/configure.py -o build/${{steps.calc_vars.outputs.arch}}-linux \
                --host-target="X86;AArch64;RISCV" \
                --llvm-external-projects=lld \
                $CROSS_OPTS \
                --cmake-opt=-DLLVM_ENABLE_ZLIB=OFF --cmake-opt=-DLLVM_ENABLE_ZSTD=OFF \
                --cmake-opt=-DLLVM_CCACHE_BUILD=ON

    - name: build sycl-headers
      if: contains(inputs.download_dpcpp_artefact, inputs.target) != true
      shell: bash
      run:
        cmake --build llvm/build/${{steps.calc_vars.outputs.arch}}-linux -- sycl-headers
  
    - name: build dpc plus plus
      if: contains(inputs.download_dpcpp_artefact, inputs.target) != true
      shell: bash
      run:
       python3 llvm/buildbot/compile.py -o llvm/build/${{steps.calc_vars.outputs.arch}}-linux -v -j 8

    - name: build extra utilties
      if: contains(inputs.download_dpcpp_artefact, inputs.target) != true
      # Build various utilities, since those aren't proper dependencies.
      # FileCheck and not are needed for tests. The rest are needed for
      # cross builds. They are enabled on all targets for consistency.
      shell: bash
      run:
       cmake --build llvm/build/${{steps.calc_vars.outputs.arch}}-linux -- FileCheck clang-tblgen
        llvm-as llvm-min-tblgen llvm-tblgen not opt -j8

    - name: cleanup ccache
      if: contains(inputs.download_dpcpp_artefact, inputs.target) != true
      shell: bash
      # Evict any unused entries older than 6 hours, the max github ci timeout
      run:
        ccache --evict-older-than 21600s

    - name: copy utilities
      if: contains(inputs.download_dpcpp_artefact, inputs.target) != true
      shell: bash
      run:
        cd llvm/build//${{steps.calc_vars.outputs.arch}}-linux/bin;
        cp FileCheck clang-tblgen llvm-as llvm-min-tblgen
        llvm-tblgen not opt ../install/bin

    - name: install config files to pick up libraries for cross compilation.
      if: contains(inputs.download_dpcpp_artefact, inputs.target) != true
      shell: bash
      run: |
        echo Installing configuration files
        cd llvm/build/${{steps.calc_vars.outputs.arch}}-linux/bin
        # Install configuration files to pick up libraries for cross compilation.
        for arch in x86_64 aarch64 riscv64; do
          echo "
          -L<CFGDIR>/../../../${arch}-linux/install/lib
          " >../install/bin/${arch}-unknown-linux-gnu.cfg;
        done

    - name: download dpc plus plus from official releases
      # TODO: This is a bit imperfect as it should parse it properly
      if: contains(inputs.download_dpcpp_artefact, inputs.target) && contains(inputs.download_dpcpp_artefact, 'download_release')
      shell: bash
      run: |
        mkdir -p llvm/build/${{steps.calc_vars.outputs.arch}}-linux/install
        cd llvm/build/${{steps.calc_vars.outputs.arch}}-linux/install
        # Get latest build - go back 2 weeks max else fail
        for COUNTER in {0..13}; do
            DATESTAMP=$(date -d "-$COUNTER day" '+%Y-%m-%d')
            wget -q https://github.com/intel/llvm/releases/download/nightly-$DATESTAMP/sycl_linux.tar.gz && echo Using DPC++ release build: $DATESTAMP && break
        done
        tar xf sycl_linux.tar.gz
        rm sycl_linux.tar.gz

    # Following build, artifacts required are in: ./llvm/build/${{steps.calc_vars.outputs.arch}}-linux/install
    # If downloading rather than building, add them to that location before upload.

    - name: download previous dpcpp if needed ${{ inputs.target }} ${{ matrix.download_dpcpp_artefact}}
      shell: bash      
      if: contains(inputs.download_dpcpp_artefact, inputs.target) && contains(inputs.download_dpcpp_artefact, 'download_release') != true
      run: |
        download_id=`echo "${{inputs.download_dpcpp_artefact}}"`
        echo "echo $download_id | sed 's/.*${{inputs.target}}=//' | sed 's/;.*//'"
        download_id=`echo $download_id | sed 's/.*${{inputs.target}}=//' | sed 's/;.*//'`
        echo download id is "'$download_id'"
        # TODO : make this work on windows
        mkdir -p llvm/build/${{steps.calc_vars.outputs.arch}}-linux/install
        git config --global --add safe.directory $PWD        
        gh run download $download_id -n dpcpp_${{ inputs.target }}
        # Downloaded tar file for extraction is: dpcpp_${{ inputs.target }}.tar
        tar xf dpcpp_${{ inputs.target }}.tar -C llvm/build/${{steps.calc_vars.outputs.arch}}-linux/install
        ls llvm/build/${{steps.calc_vars.outputs.arch}}-linux/install

    - name: upload dpcpp artifact
      uses: ./.github/actions/upload_artifact
      with:
        name: dpcpp_${{inputs.target}}
        path: llvm/build/${{steps.calc_vars.outputs.arch}}-linux/install
        needs_tar: 'true'
