name: setup-build
description: Setup ready for building. Includes installs, ninja, build cache setup and loading llvm cache

inputs:
  os:
    description: 'OS - ubuntu or windows'
    default: ubuntu
  llvm_build_type:
    description: 'llvm Build type (Release, RelAssert) - note we need to use RelAssert for the cache pattern matching'
    default: RelAssert
  llvm_version:
    description: 'Major llvm version to use for fetching llvm cache e.g. 18'
    default: 18
  ubuntu_version:
    description: 'Version of ubuntu used for cache retrieval and prerequisites'
    default: 22.04
  windows_version:
    description: 'Version of windows used for cache retrieval and prerequisites'
    default: 2019
  save:
    description: 'Save the build cache at the end - not for PR testing'
    default: false
  arch:
    description: 'Architecture: x86_64 | x86 | aarch64'
    default: x86_64

runs:
  # We don't want a new docker just a list of steps, so mark as composite
  using: "composite"
  steps:
    - name: Install ubuntu prerequisites
      if: ${{ inputs.os == 'ubuntu' }}
      shell: bash
      run: |
        pip install lit clang-format==19.1.0 virtualenv
        # x86: Enable ability to install x86 packages for cross compilation
        if [ "${{ inputs.arch }}" = "x86" ]; then sudo dpkg --add-architecture i386 ; fi
        # aarch64: Enable ability to install arm64 packages for cross compilation
        #      The main archive only hosts amd64 and i386, also add ports for arm64.
        #      Also install Arm/Aarch64 requirements
        if [ "${{ inputs.arch }}" = "aarch64" ]; then \
           sudo dpkg --add-architecture arm64 ; \
           sudo sed -i -e '/^deb /{h;s|deb |&[arch=amd64,i386] |p;g;s|deb http://[^ ]*|deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports|p;d}' /etc/apt/sources.list; \
           sudo apt-get install --yes gcc-11-arm-linux-gnueabihf g++-11-arm-linux-gnueabihf; \
           sudo apt-get install --yes gcc-11-aarch64-linux-gnu g++-11-aarch64-linux-gnu; \
        fi
        wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        if [ "${{ inputs.ubuntu_version }}" = "20.04" ]; then sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.243-focal.list https://packages.lunarg.com/vulkan/1.3.243/lunarg-vulkan-1.3.243-focal.list; fi
        if [ "${{ inputs.ubuntu_version }}" = "22.04" ]; then sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.243-jammy.list https://packages.lunarg.com/vulkan/1.3.243/lunarg-vulkan-1.3.243-jammy.list; fi
        if [ "${{ inputs.ubuntu_version }}" = "24.04" ]; then sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-noble.list https://packages.lunarg.com/vulkan/lunarg-vulkan-noble.list; fi
        sudo apt-get update
        # Install QEMU for testing cross compilation.
        sudo apt-get install --yes qemu-user
        sudo apt-get install --yes doxygen
        sudo apt-get install --yes vulkan-sdk
        if [ "${{ inputs.arch }}" = "x86" ]; then sudo apt-get install --yes gcc-multilib g++-multilib libc6-dev:i386 lib32tinfo-dev ; fi

    - name: Install windows prerequisites
      if: ${{ inputs.os == 'windows' }}
      shell: pwsh
      run: |
        Invoke-WebRequest  https://sdk.lunarg.com/sdk/download/1.3.283.0/windows/VulkanSDK-1.3.283.0-Installer.exe -OutFile Installer.exe
        .\Installer.exe --accept-licenses --default-answer --confirm-command install
        rm Installer.exe
        # add VulcanSDK to path
        echo "PATH=C:\VulkanSDK\1.3.283.0\Bin;$env:PATH" >> $env:GITHUB_ENV
        pip install lit

    - name: Install Ninja
      uses: llvm/actions/install-ninja@main

    - name: load llvm
      uses: actions/cache/restore@v4
      with:
        path: llvm_install/**
        key: llvm-${{ inputs.os }}-${{ inputs.os == 'ubuntu' && inputs.ubuntu_version || inputs.windows_version }}-${{ inputs.arch }}-v${{ inputs.llvm_version }}-${{ inputs.llvm_build_type }}
        fail-on-cache-miss: true

      # note the PR testing usage should set 'save' to false, to avoid PR testing creating new caches on a branch
    - name: Setup sccache
      uses: hendrikmuhs/ccache-action@ed74d11c0b343532753ecead8a951bb09bb34bc9 # v1.2.14
      with:
        max-size: 200M
        key: sccache-build
        variant: sccache
        save: ${{ inputs.save }}
