name: setup-build
description: Setup ready for building. Includes installs, ninja, build cache setup and loading llvm cache

inputs:
  os:
    description: 'OS - ubuntu or windows'
    default: ubuntu
  llvm_build_type:
    description: 'llvm Build type (Release, RelAssert) - note we need to use RelAssert for the cache pattern matching'
    default: RelAssert
  llvm_version:
    description: 'Major llvm version to use for fetching llvm cache e.g. 18'
    default: 18
  ubuntu_version:
    description: 'Version of ubuntu used for cache retrieval and prerequisites'
    default: 22.04
  windows_version:
    description: 'Version of windows used for cache retrieval and prerequisites'
    default: 2019
  save:
    description: 'Save the build cache at the end - not for PR testing'
    default: false
  cross_arch:
    description: 'Cross compilation architecture from: x86, arm, aarch64, riscv64. Default: "" (no cross compile)'
    default: ""
    # Note: runner architectures from: x86_64 (aka runner.arch: X64), aarch64 (aka runner.arch: ARM64)

runs:
  # We don't want a new docker just a list of steps, so mark as composite
  using: "composite"
  steps:
    - name: Install ubuntu prerequisites
      if: ${{ inputs.os == 'ubuntu' }}
      shell: bash
      run: |
        if [ "${{ inputs.cross_arch }}" = "x86" ]; then sudo dpkg --add-architecture i386 ; fi
        wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        if [ "${{ inputs.ubuntu_version }}" = "20.04" ]; then sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.243-focal.list https://packages.lunarg.com/vulkan/1.3.243/lunarg-vulkan-1.3.243-focal.list; fi
        if [ "${{ inputs.ubuntu_version }}" = "22.04" ]; then sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.243-jammy.list https://packages.lunarg.com/vulkan/1.3.243/lunarg-vulkan-1.3.243-jammy.list; fi
        if [ "${{ inputs.ubuntu_version }}" = "24.04" ]; then sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-noble.list https://packages.lunarg.com/vulkan/lunarg-vulkan-noble.list; fi
        sudo apt-get update
        pip install lit clang-format==19.1.0 clang-tidy==19.1.0 virtualenv
        sudo apt-get install --yes doxygen
        sudo apt-get install --yes vulkan-sdk
        if [ "${{ inputs.cross_arch }}" = "x86" ]; then \
           sudo apt-get install --yes gcc-multilib g++-multilib libc6-dev:i386 lib32tinfo-dev; \
        fi
        if [ "${{ inputs.cross_arch }}" = "arm" ]; then \
           sudo apt-get install --yes gcc-11-arm-linux-gnueabihf g++-11-arm-linux-gnueabihf; \
        fi
        if [ "${{ inputs.cross_arch }}" = "aarch64" ]; then \
           sudo apt-get install --yes gcc-11-aarch64-linux-gnu g++-11-aarch64-linux-gnu; \
        fi
        if [ "${{ inputs.cross_arch }}" = "riscv64" ]; then \
           sudo apt-get install --yes gcc-11-riscv64-linux-gnu g++-11-riscv64-linux-gnu; \
        fi
        if [ "${{ inputs.cross_arch }}" != "" ] && [ "${{ inputs.cross_arch }}" != "x86" ]; then \
           # Install QEMU for testing cross compilation.
           sudo apt-get install --yes qemu-user; \
        fi

    - name: Install windows prerequisites
      if: ${{ inputs.os == 'windows' }}
      shell: pwsh
      run: |
        Invoke-WebRequest  https://sdk.lunarg.com/sdk/download/1.3.283.0/windows/VulkanSDK-1.3.283.0-Installer.exe -OutFile Installer.exe
        .\Installer.exe --accept-licenses --default-answer --confirm-command install
        rm Installer.exe
        # add VulcanSDK to path
        echo "PATH=C:\VulkanSDK\1.3.283.0\Bin;$env:PATH" >> $env:GITHUB_ENV
        pip install lit

    - name: Install Ninja
      uses: llvm/actions/install-ninja@main

    - name: set llvm key
      id: set_llvm_key
      shell: bash
      run: |
        KEY_VERSION="${{ inputs.ubuntu_version }}"
        if [ "${{ inputs.os }}" = "windows" ]; then \
           KEY_VERSION="${{ inputs.windows_version }}" ; \
        fi
        echo "key_version=$KEY_VERSION" >> "$GITHUB_OUTPUT"
        KEY_ARCH="x86_64"
        if [ "${{ runner.arch }}" = "ARM64" ]; then \
           KEY_ARCH="aarch64" ; \
        fi
        if [ "${{ inputs.cross_arch }}" != "" ]; then \
           KEY_ARCH="${{ inputs.cross_arch }}" ; \
        fi
        echo "key_arch=$KEY_ARCH" >> "$GITHUB_OUTPUT"
        echo "key_version=$KEY_VERSION"
        echo "key_arch=$KEY_ARCH"

    - name: load llvm
      uses: actions/cache/restore@v4
      with:
        path: llvm_install/**
        key: llvm-${{ inputs.os }}-${{ steps.set_llvm_key.outputs.key_version }}-${{ steps.set_llvm_key.outputs.key_arch }}-v${{ inputs.llvm_version }}-${{ inputs.llvm_build_type }}
        fail-on-cache-miss: true

      # note the PR testing usage should set 'save' to false, to avoid PR testing creating new caches on a branch
    - name: Setup sccache
      uses: hendrikmuhs/ccache-action@ed74d11c0b343532753ecead8a951bb09bb34bc9 # v1.2.14
      with:
        max-size: 200M
        key: sccache-build
        variant: sccache
        save: ${{ inputs.save }}
