name: setup-build
description: Setup ready for building. Includes installs, ninja, build cache setup and loading llvm cache

inputs:
  os:
    description: 'OS - ubuntu or windows'
    default: ubuntu
  llvm_build_type:
    description: 'llvm Build type (Release, RelAssert) - note we need to use RelAssert for the cache pattern matching'
    default: RelAssert
  llvm_version:
    description: 'Major llvm version to use for fetching llvm cache e.g. 20'
  ubuntu_version:
    description: 'Version of ubuntu used for cache retrieval and prerequisites'
    default: 22.04
  windows_version:
    description: 'Version of windows used for cache retrieval and prerequisites'
    default: 2025
  save:
    description: 'Save the build cache at the end - not for PR testing'
    default: false
  cross_arch:
    description: 'Cross compilation architecture from: x86, arm, aarch64, riscv64. Default: "none" (no cross compile), will auto fetch native arch'
    default: "none"
  llvm_source:
    description: 'source to get llvm from - one of install, cache or workflow id'
    default: "cache"
  github_token:
    description: "gh token for downloading artifacts"
    default: 'TOKEN_NOT_SET'


runs:
  # We don't want a new docker just a list of steps, so mark as composite
  using: "composite"
  steps:
    - name: Install ubuntu prerequisites
      # Note: most prereqs now installed in dockerfiles
      if: ${{ inputs.os == 'ubuntu' }}
      shell: bash
      run: |
        # required for virtualenv running in docker
        echo "PATH=$PATH:$HOME/.local/bin" >> $GITHUB_ENV

    - name: Install windows prerequisites
      if: ${{ inputs.os == 'windows' }}
      shell: pwsh
      run: |
        choco install --yes cmake --allow-downgrade --version=3.30.1
        Invoke-WebRequest  https://sdk.lunarg.com/sdk/download/1.3.283.0/windows/VulkanSDK-1.3.283.0-Installer.exe -OutFile Installer.exe
        .\Installer.exe --accept-licenses --default-answer --confirm-command install
        rm Installer.exe
        # add VulcanSDK to path
        echo "PATH=C:\VulkanSDK\1.3.283.0\Bin;$env:PATH" >> $env:GITHUB_ENV
        pip install lit

    - name: set llvm key
      id: set_llvm_key
      shell: bash
      run: |
        KEY_VERSION="${{ inputs.ubuntu_version }}"
        if [ "${{ inputs.os }}" = "windows" ]; then
           KEY_VERSION="${{ inputs.windows_version }}"
        fi
        echo "key_version=$KEY_VERSION" >> "$GITHUB_OUTPUT"
        KEY_ARCH="x86_64"
        KEY_NATIVE_ARCH="x86_64"
        if [ "${{ runner.arch }}" = "ARM64" ]; then
           KEY_ARCH="aarch64" ;
           KEY_NATIVE_ARCH="aarch64"
        fi
        if [ "${{ inputs.cross_arch }}" != "none" ]; then
           KEY_ARCH="${{ inputs.cross_arch }}"
        fi
        echo "key_arch=$KEY_ARCH" >> "$GITHUB_OUTPUT"
        echo "key_native_arch=$KEY_NATIVE_ARCH" >> "$GITHUB_OUTPUT"
        cat $GITHUB_OUTPUT

    - name: load llvm native
      if: inputs.llvm_source == 'cache'
      uses: actions/cache/restore@v4
      with:
        path: llvm_install/**
        key: llvm-${{ inputs.os }}-${{ steps.set_llvm_key.outputs.key_version }}-${{ steps.set_llvm_key.outputs.key_native_arch }}-v${{ inputs.llvm_version }}-${{ inputs.llvm_build_type }}
        fail-on-cache-miss: true

    - name: install llvm native ubuntu # via "apt install"
      if: inputs.os == 'ubuntu' && inputs.llvm_source == 'install'
      shell: bash
      env:
        UBUNTU_NAME: "${{ inputs.ubuntu_version == '24.04' && 'noble' || 'jammy' }}"
      run: |
        set -x
        echo "deb [signed-by=/usr/share/keyrings/llvm-archive-keyring.gpg] http://apt.llvm.org/$UBUNTU_NAME/ llvm-toolchain-$UBUNTU_NAME-${{ inputs.llvm_version }} main" | sudo tee /etc/apt/sources.list.d/llvm.list >/dev/null
        sudo apt-get update

        sudo apt-get install -y llvm-${{ inputs.llvm_version }}-dev liblld-${{ inputs.llvm_version }}-dev libclang-${{ inputs.llvm_version }}-dev
        sudo apt-get install -y libpolly-${{ inputs.llvm_version }}-dev clang-${{ inputs.llvm_version }}

        ln -s /usr/lib/llvm-${{ inputs.llvm_version }} llvm_install

    - name: install llvm native windows # via llvm-project/releases/download & extract
      if: inputs.os == 'windows' && inputs.llvm_source == 'install'
      shell: pwsh
      env:
        # Map inputs.llvm_version to specific download release here.
        LLVM_RELEASE: "${{ inputs.llvm_version == '21' && '21.1.0' || '20.1.8' }}"
      run: |
        Invoke-WebRequest https://github.com/llvm/llvm-project/releases/download/llvmorg-$env:LLVM_RELEASE/clang+llvm-$env:LLVM_RELEASE-x86_64-pc-windows-msvc.tar.xz -OutFile clang+llvm-$env:LLVM_RELEASE-x86_64-pc-windows-msvc.tar.xz
        7z x clang+llvm-$env:LLVM_RELEASE-x86_64-pc-windows-msvc.tar.xz -so | 7z x -si -ttar
        mv clang+llvm-$env:LLVM_RELEASE-x86_64-pc-windows-msvc llvm_install
        # Work-around: satisfy hard-wired reference to VS "Professional" lib (when "Enterprise" is actually installed)
        mkdir "C:/Program Files (x86)/Microsoft Visual Studio/2019/Professional/DIA SDK/lib/amd64"
        cp "$Env:VSINSTALLDIR/DIA SDK/lib/amd64/diaguids.lib" "C:/Program Files (x86)/Microsoft Visual Studio/2019/Professional/DIA SDK/lib/amd64"

    - name: download llvm native
      if: inputs.llvm_source != 'install' && inputs.llvm_source != 'cache'
      uses: ./.github/actions/download_artifact
      with:
        name: llvm-${{ inputs.os }}-${{ steps.set_llvm_key.outputs.key_version }}-${{ steps.set_llvm_key.outputs.key_native_arch }}-${{ inputs.llvm_version }}-${{ inputs.llvm_build_type }}
        run_id: ${{ inputs.llvm_source }}
        token: ${{ inputs.github_token }}
        path: llvm_install
        needs_tar: ${{ startsWith(runner.os, 'Windows') && 'false' || 'true' }}

    - shell: bash
      if: inputs.cross_arch != 'none'    
      run: mv llvm_install llvm_install_native

    # This is deprecated and will be removed soon.
    - name: load llvm cross cache
      if: inputs.cross_arch != 'none' && inputs.llvm_source == 'cache'
      uses: actions/cache/restore@v4
      with:
        path: llvm_install/**
        key: llvm-${{ inputs.os }}-${{ steps.set_llvm_key.outputs.key_version }}-${{ steps.set_llvm_key.outputs.key_arch }}-v${{ inputs.llvm_version }}-${{ inputs.llvm_build_type }}
        fail-on-cache-miss: true

    - name: load llvm cross download
      if: inputs.cross_arch != 'none' && inputs.llvm_source != 'cache' && inputs.llvm_source != 'install'

      uses: ./.github/actions/download_artifact
      with:
        name: llvm-${{ inputs.os }}-${{ steps.set_llvm_key.outputs.key_version }}-${{ steps.set_llvm_key.outputs.key_arch }}-${{ inputs.llvm_version }}-${{ inputs.llvm_build_type }}
        run_id: ${{ inputs.llvm_source }}
        token: ${{ inputs.github_token }}
        path: llvm_install
        needs_tar: ${{ startsWith(runner.os, 'Windows') && 'false' || 'true' }}

      # note the PR testing usage should set 'save' to false, to avoid PR testing creating new caches on a branch
    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@bfa03e1de4d7f7c3e80ad9109feedd05c4f5a716 # v1.2.19
      with:
        max-size: 200M
        key: ccache-build-${{ inputs.os }}
        variant: ccache
        save: ${{ inputs.save }}
