name: setup-build
description: Setup ready for building. Includes installs, ninja, build cache setup and loading llvm cache

inputs:
  os:
    description: 'OS - ubuntu or windows'
    default: ubuntu
  llvm_build_type:
    description: 'llvm Build type (Release, RelAssert) - note we need to use RelAssert for the cache pattern matching'
    default: RelAssert
  llvm_version:
    description: 'Major llvm version to use for fetching llvm cache e.g. 18'
    default: 18
  ubuntu_version:
    description: 'Version of ubuntu used for cache retrieval and prerequisites'
    default: 22.04
  windows_version:
    description: 'Version of windows used for cache retrieval and prerequisites'
    default: 2019
  save:
    description: 'Save the build cache at the end - not for PR testing'
    default: false
  cross_arch:
    description: 'Cross compilation architecture from: x86, arm, aarch64, riscv64. Default: "none" (no cross compile), will auto fetch native arch'
    default: "none"
  clang_tidy:
    description: 'Enable installing of clang-tidy (currently 19)'
    type: boolean
    default: false
  vulkan_sdk_install:
    description: 'vulkan install flag'
    default: true
  
runs:
  # We don't want a new docker just a list of steps, so mark as composite
  using: "composite"
  steps:
    - name: Install ubuntu prerequisites
      if: ${{ inputs.os == 'ubuntu' }}
      shell: bash
      run: |
        # required for virtualenv running in docker
        echo "PATH=$PATH:$HOME/.local/bin" >> $GITHUB_ENV
        # required due to using non docker to build llvm
        # If we switch to always using docker we can drop.
        sudo apt-get install --yes lib32ncurses-dev    
        if [ "${{ inputs.cross_arch }}" = "x86" ]; then sudo dpkg --add-architecture i386 ; fi
        wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
        if [ "${{ inputs.ubuntu_version }}" = "20.04" ]; then sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.243-focal.list https://packages.lunarg.com/vulkan/1.3.243/lunarg-vulkan-1.3.243-focal.list; fi
        if [ "${{ inputs.ubuntu_version }}" = "22.04" ]; then sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.243-jammy.list https://packages.lunarg.com/vulkan/1.3.243/lunarg-vulkan-1.3.243-jammy.list; fi
        if [ "${{ inputs.ubuntu_version }}" = "24.04" ]; then sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-noble.list https://packages.lunarg.com/vulkan/lunarg-vulkan-noble.list; fi

        if [ "${{ inputs.clang_tidy }}" = "true" ]; then
          wget -qO - https://apt.llvm.org/llvm-snapshot.gpg.key | gpg --dearmor - | sudo tee /usr/share/keyrings/llvm-archive-keyring.gpg >/dev/null
          if [ "${{ inputs.ubuntu_version }}" = "20.04" ]; then echo 'deb [signed-by=/usr/share/keyrings/llvm-archive-keyring.gpg] http://apt.llvm.org/focal/ llvm-toolchain-focal-19 main' | sudo tee /etc/apt/sources.list.d/llvm.list >/dev/null; fi
          if [ "${{ inputs.ubuntu_version }}" = "22.04" ]; then echo 'deb [signed-by=/usr/share/keyrings/llvm-archive-keyring.gpg] http://apt.llvm.org/jammy/ llvm-toolchain-jammy-19 main' | sudo tee /etc/apt/sources.list.d/llvm.list >/dev/null; fi
          if [ "${{ inputs.ubuntu_version }}" = "24.04" ]; then echo 'deb [signed-by=/usr/share/keyrings/llvm-archive-keyring.gpg] http://apt.llvm.org/noble/ llvm-toolchain-noble-19 main' | sudo tee /etc/apt/sources.list.d/llvm.list >/dev/null; fi
        fi

        sudo apt-get update
        if [ "${{ inputs.clang_tidy }}" = "true" ]; then sudo apt-get install --yes clang-tidy-19; fi
        pip install lit clang-format==19.1.0 virtualenv
        # required for gtest-terse-runner running in docker
        sudo apt-get install --yes python3-colorama
        sudo apt-get install --yes doxygen
        if [ "${{ inputs.vulkan_sdk_install }}" = "true" ]; then \
           sudo apt-get install --yes vulkan-sdk
        fi
        # TODO: Only required if we are running something that requires qemu, not required for building
        if [ "${{ inputs.cross_arch }}" != "none" ] && [ "${{ inputs.cross_arch }}" != "x86" ]; then \
           # Install QEMU for testing cross compilation.
           sudo apt-get install --yes qemu-user; \
        fi

    - name: Install cross arch tools
      if: ${{ inputs.os == 'ubuntu' }}
      uses: ./.github/actions/do_install_ubuntu_cross_tools
      with:
        cross_arch: ${{ inputs.cross_arch }}

    - name: Install windows prerequisites
      if: ${{ inputs.os == 'windows' }}
      shell: pwsh
      run: |
        Invoke-WebRequest  https://sdk.lunarg.com/sdk/download/1.3.283.0/windows/VulkanSDK-1.3.283.0-Installer.exe -OutFile Installer.exe
        .\Installer.exe --accept-licenses --default-answer --confirm-command install
        rm Installer.exe
        # add VulcanSDK to path
        echo "PATH=C:\VulkanSDK\1.3.283.0\Bin;$env:PATH" >> $env:GITHUB_ENV
        pip install lit

    - name: Install Ninja
      uses: llvm/actions/install-ninja@a1ea791b03c8e61f53a0e66f2f73db283aa0f01e # main branch

    - name: set llvm key
      id: set_llvm_key
      shell: bash
      run: |
        KEY_VERSION="${{ inputs.ubuntu_version }}"
        if [ "${{ inputs.os }}" = "windows" ]; then
           KEY_VERSION="${{ inputs.windows_version }}"
        fi
        echo "key_version=$KEY_VERSION" >> "$GITHUB_OUTPUT"
        KEY_ARCH="x86_64"
        KEY_NATIVE_ARCH="x86_64"
        if [ "${{ runner.arch }}" = "ARM64" ]; then
           KEY_ARCH="aarch64" ;
           KEY_NATIVE_ARCH="aarch64"
        fi
        if [ "${{ inputs.cross_arch }}" != "none" ]; then
           KEY_ARCH="${{ inputs.cross_arch }}"
        fi
        echo "key_arch=$KEY_ARCH" >> "$GITHUB_OUTPUT"
        echo "key_native_arch=$KEY_NATIVE_ARCH" >> "$GITHUB_OUTPUT"
        cat $GITHUB_OUTPUT

    - name: load llvm native
      if: inputs.cross_arch != 'none'
      uses: actions/cache/restore@v4
      with:
        path: llvm_install/**
        key: llvm-${{ inputs.os }}-${{ steps.set_llvm_key.outputs.key_version }}-${{ steps.set_llvm_key.outputs.key_native_arch }}-v${{ inputs.llvm_version }}-${{ inputs.llvm_build_type }}
        fail-on-cache-miss: true
    - shell: bash
      if: inputs.cross_arch != 'none'    
      run: mv llvm_install llvm_install_native

    - name: load llvm
      uses: actions/cache/restore@v4
      with:
        path: llvm_install/**
        key: llvm-${{ inputs.os }}-${{ steps.set_llvm_key.outputs.key_version }}-${{ steps.set_llvm_key.outputs.key_arch }}-v${{ inputs.llvm_version }}-${{ inputs.llvm_build_type }}
        fail-on-cache-miss: true

      # note the PR testing usage should set 'save' to false, to avoid PR testing creating new caches on a branch
    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@ed74d11c0b343532753ecead8a951bb09bb34bc9 # v1.2.14
      with:
        max-size: 200M
        key: ccache-build
        variant: ccache
        save: ${{ inputs.save }}
