name: build_portDNN
description: Action to clone and build portDNN using oneAPI

inputs:
  workspace:
    description: 'Main workflow workspace'
    default: ${{ github.workspace }}

runs:
  # We don't want a new docker just a list of steps, so mark as composite
  using: "composite"
  steps:
    - name: Clone portDNN
      shell: bash
      run: git clone --recursive https://github.com/codeplaysoftware/portDNN.git

    - name: Install prerequisites
      shell: bash
      run: |
        sudo apt-get install -y spirv-tools

    - name: Install Ninja
      uses: llvm/actions/install-ninja@a1ea791b03c8e61f53a0e66f2f73db283aa0f01e # main branch

    - name: Get Intel OneAPI Nightly Release
      shell: bash
      run: |
        # Update the nightly release from intel/llvm from 2024-03-04 to daily once
        # everything has stablised
        wget "https://github.com/intel/llvm/releases/download/nightly-2024-03-04/sycl_linux.tar.gz"
        mkdir linux_nightly_release
        tar -xzf sycl_linux.tar.gz -C linux_nightly_release

    - name: Set up Environment and build portDNN
      shell: bash
      run: |
        export LD_LIBRARY_PATH=$(pwd)/linux_nightly_release/lib:$LD_LIBRARY_PATH
        export CMAKE_CXX_COMPILER=$(pwd)/linux_nightly_release/bin/clang++
        export CMAKE_C_COMPILER=$(pwd)/linux_nightly_release/bin/clang
        export OCL_ICD_FILENAMES=${{ inputs.workspace }}/ock_install_dir/lib/libCL.so
        cmake -B portDNN_build_dir portDNN -GNinja -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER} -DSNN_BUILD_BENCHMARKS=OFF -DSNN_BENCH_SYCLBLAS=OFF -DSNN_BUILD_DOCUMENTATION=OFF -DSNN_BUILD_TESTS=OFF
        ninja -C portDNN_build_dir

    - name: Package artifacts
      shell: bash
      run: |
        tar -cvzf portDNN_build.tar.gz portDNN_build_dir

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: portDNN_build
        path: portDNN_build.tar.gz
