# Calling workflow for running planned style tests, called from a specific llvm version caller
name: Run planned testing
on:
  workflow_call:
    inputs:
      llvm_version:
        description: 'llvm major version (e.g 20,21,main) - to be used for llvm specific fails'
        type: string
      llvm_branch:
        description: 'The actual llvm branch to check out e.g. release/20.x'
        type: string
      ock:
        type: boolean
        description: 'Enable ock artefact building'
        default: true
      test_tornado:
        type: boolean
        description: 'Enable testing tornado'
        default: true
      test_sanitizers:
        type: boolean
        description: 'Enable testing sanitizers'
        default: true
      test_remote_hal:
        type: boolean
        description: 'Enable testing remote_hal'
        default: true
      test_sycl_cts:
        type: boolean
        description: 'Enable testing sycl-cts'
        default: true
      test_sycl_e2e:
        type: boolean
        description: 'Enable testing sycl-e2e'
        default: true
      test_opencl_cts:
        type: boolean
        description: 'Enable testing opencl-cts'
        default: true
      use_llvm_github_cache:
        type: boolean
        description: 'Use a cache for any llvm artifact fetching and update if not found'
        default: false
      download_ock_artefact:
        type: string
        description: 'download ock from previous artefact run e.g. host_x86_64_linux=12915462445;host_aarch64_linux=12915462445'
        default: ''
      download_dpcpp_artefact:
        type: string
        default: ''
        description: 'download dpcpp from previous artefact run e.g. host_x86_64_linux=12915462445;host_aarch64_linux=12915462445'
      download_sycl_cts_artefact:
        type: string
        default: ''
        description: 'download sycl_cts from previous artefact run e.g. host_x86_64_linux=12915462445;host_aarch64_linux=12915462445'
      run_internal:
        type: boolean
        default: true
      run_external:
        type: boolean
        default: true
      target_list:
        type: string
        default: '[ "host_x86_64_linux",
                      "host_aarch64_linux",
                      "host_riscv64_linux",
                      "host_i686_linux",
                      "refsi_riscv64_linux",
                      "host_x86_64_windows" ]'
      build_llvm:
        type: boolean
        default: true
      save_cache:
        type: boolean
        default: false
      dpcpp_repo_pr_no:
        description: 'dpc++ repo ref: enter PR number (else default branch is used)'
        type: string
        default: ""
permissions:
  packages: read

jobs:
  build_llvm_artefacts:
    name: Call PR testing on schedule
    if: inputs.build_llvm && inputs.ock
    uses: ./.github/workflows/create_llvm_artefacts.yml
    secrets: inherit
    with:
      llvm_branch: ${{ inputs.llvm_branch }}
      llvm_version: ${{ inputs.llvm_version }}
      use_github_cache: ${{ inputs.use_llvm_github_cache }}
      target_list: ${{ inputs.target_list }}

  run_external_tests:
    if: inputs.run_external && always() && !failure() && !cancelled()
    needs: [build_llvm_artefacts]
    # This makes the diagram too big if we post much here so S_ for scheduled.
    name: S_
    uses: ./.github/workflows/run_ock_external_tests.yml
    with:
      target_list: ${{ inputs.target_list }}
      ock: ${{ inputs.ock }}
      test_tornado: ${{ inputs.test_tornado }}
      test_remote_hal: ${{ inputs.test_remote_hal }}
      test_sycl_cts: ${{ inputs.test_sycl_cts }}
      test_sycl_e2e: ${{ inputs.test_sycl_e2e }}
      test_opencl_cts: ${{ inputs.test_opencl_cts }}
      test_sanitizers: ${{ inputs.test_sanitizers }}
      llvm_branch: ${{ inputs.llvm_branch }}
      save_cache: ${{ inputs.save_cache }}
      dpcpp_repo_pr_no: ${{ inputs.dpcpp_repo_pr_no }}

      # The following can be used to download from a previous workflow run (change id)
      download_ock_artefact: ${{ inputs.download_ock_artefact }}
      download_dpcpp_artefact: ${{ inputs.download_dpcpp_artefact }}
      download_sycl_cts_artefact: ${{ inputs.download_sycl_cts_artefact }}

      # Override this value if we wish to use a previous workflow's llvm binary
      # We may want to disable needs: and disable original build_llvm_artefacts
      llvm_source: ${{ github.run_id }}
      llvm_version: ${{ inputs.llvm_version }}

  run_internal_tests:
    if: inputs.run_internal && always() && !failure() && !cancelled()
    needs: [build_llvm_artefacts]
    uses: ./.github/workflows/run_ock_internal_tests.yml
    with:
      is_pull_request: false
      # Can replace this with a previous workflow to run without waiting for llvm build
      # although generally simpler to use caches (inputs.use_llvm_github_cache)
      llvm_source: ${{ github.run_id }}
      llvm_current: ${{ inputs.llvm_version }}
      llvm_previous: ${{ inputs.llvm_version }}
      target_list: ${{ inputs.target_list }}
